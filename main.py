#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Binance Alpha monitor v1.4 ‚Äî –±—ã—Å—Ç—Ä—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä "–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ"
- –¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ù–ï —É—á–∞—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
- –§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —É–∫–∞–∑–∞–ª
"""

import requests
import time
import random
import json
import os
import re
from datetime import datetime
from bs4 import BeautifulSoup
from threading import Thread
from flask import Flask

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ---
TELEGRAM_BOT_TOKEN = '7810292989:AAFKDPamp7LcDFaimnDHauP7g5SuQFReKLQ'
TELEGRAM_CHAT_IDS = [
    '2002273774',  # –í–∞—à ID
    '334157830'  # ID –¥—Ä—É–≥–∞ @RAskarovic
]

CHECK_URL = 'https://www.binance.com/ru/feed/alpha'
CHECK_INTERVAL = 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±—ã—Å—Ç—Ä–æ)
DETECTED_FILE = 'detected_airdrops.json'
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)",
    "Mozilla/5.0 (X11; Linux x86_64)",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117 Safari/537.36",
]

KEY_PHRASES = [
    r"–£—Å–ø–µ–π—Ç–µ\s*–ø—Ä–∏–Ω—è—Ç—å\s*—É—á–∞—Å—Ç–∏–µ", r"–°—É–º–º–∞\s*–ø–æ–ª—É—á–µ–Ω–∏—è", r"–¢—Ä–µ–±—É–µ–º—ã–µ\s*–±–∞–ª–ª—ã",
    r"–≠—Ç–∞–ø—ã\s*–∞–∏—Ä–¥—Ä–æ–ø–∞", r"\b15\s*–±–∞–ª–ª", r"\b190\s*–±–∞–ª–ª", r"–ó–∞–≤–µ—Ä—à–µ–Ω",
    r"–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
]


# ---------- load / save detected ----------
def load_detected():
    if os.path.exists(DETECTED_FILE):
        try:
            with open(DETECTED_FILE, "r", encoding="utf-8") as f:
                return set(json.load(f))
        except Exception:
            return set()
    return set()


def save_detected(s):
    try:
        with open(DETECTED_FILE, "w", encoding="utf-8") as f:
            json.dump(list(s), f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è detected: {e}")


# --------- Telegram sender ----------
def send_telegram_message(message, url_button=None):
    api = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    for chat_id in TELEGRAM_CHAT_IDS:
        payload = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": False
        }
        if url_button:
            payload["reply_markup"] = json.dumps(
                {
                    "inline_keyboard": [[{
                        "text": "–û—Ç–∫—Ä—ã—Ç—å Binance Alpha",
                        "url": url_button
                    }]]
                },
                ensure_ascii=False)
        try:
            r = requests.post(api, data=payload, timeout=8)
            if r.status_code == 200:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
            else:
                print(f"‚ö†Ô∏è Telegram {r.status_code} -> {r.text[:200]}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {e}")


# --------- –ü–∞—Ä—Å–µ—Ä/–¥–µ—Ç–µ–∫—Ç–æ—Ä ----------
def find_signals(html_text):
    soup = BeautifulSoup(html_text, "html.parser")
    text_all = soup.get_text(" ", strip=True)
    found_any = False
    for p in KEY_PHRASES:
        if re.search(p, text_all, flags=re.IGNORECASE):
            found_any = True
            break
    if not found_any:
        return []

    results = []
    candidate_nodes = []
    for tag in soup.find_all(text=True):
        t = tag.strip()
        if not t:
            continue
        for p in KEY_PHRASES:
            if re.search(p, t, flags=re.IGNORECASE):
                candidate_nodes.append(tag.parent)
                break

    uniq_blocks = []
    seen_hash = set()
    for node in candidate_nodes:
        container = node
        for _ in range(4):
            if container is None:
                break
            txt = container.get_text(" ", strip=True)
            # filter out very short/irrelevant
            if len(txt) < 20:
                container = container.parent
                continue
            h = hash(txt[:400])
            if h not in seen_hash:
                seen_hash.add(h)
                uniq_blocks.append(txt)
                break
            container = container.parent

    for block in uniq_blocks:
        b = re.sub(r"\s+", " ", block)
        m_proj = re.split(r"(–°—É–º–º–∞\s*–ø–æ–ª—É—á–µ–Ω–∏—è|–¢—Ä–µ–±—É–µ–º—ã–µ\s*–±–∞–ª–ª)",
                          b,
                          flags=re.IGNORECASE)
        project = (m_proj[0].strip()[:120]
                   ) if m_proj and len(m_proj) > 0 else "Unknown Project"

        m_req = re.search(r"–¢—Ä–µ–±—É–µ–º—ã–µ\s*–±–∞–ª–ª\w*\s*[:\s]*([0-9]{1,5})",
                          b,
                          flags=re.IGNORECASE)
        if not m_req:
            m_req = re.search(r"([0-9]{1,5})\s*–±–∞–ª–ª", b, flags=re.IGNORECASE)
        required = m_req.group(1) if m_req else "‚Äî"

        m_reward = re.search(r"–°—É–º–º–∞\s*–ø–æ–ª—É—á–µ–Ω–∏—è\s*[:\s]*([^\n\r‚Ä¢‚Äî]{1,80})",
                             b,
                             flags=re.IGNORECASE)
        reward = m_reward.group(1).strip() if m_reward else "‚Äî"

        urgent = True if re.search(
            r"–£—Å–ø–µ–π—Ç–µ\s*–ø—Ä–∏–Ω—è—Ç—å\s*—É—á–∞—Å—Ç–∏–µ", b, flags=re.IGNORECASE) else False
        has_15 = True if re.search(r"\b15\s*–±–∞–ª–ª", b,
                                   flags=re.IGNORECASE) else False
        has_190 = True if re.search(r"\b190\s*–±–∞–ª–ª", b,
                                    flags=re.IGNORECASE) else False
        status = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" if re.search(r"–ó–∞–≤–µ—Ä—à–µ–Ω", b,
                                          flags=re.IGNORECASE) else "–ê–∫—Ç–∏–≤–µ–Ω"

        airdrop_id = f"{project}_{required}_{reward}".replace(" ", "_")[:180]

        results.append({
            "id": airdrop_id,
            "project": project,
            "required_points": required,
            "reward": reward,
            "urgent": urgent,
            "has_15": has_15,
            "has_190": has_190,
            "status": status,
            "excerpt": b[:400]
        })

    return results


# --------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ----------
def check_page():
    headers = {
        "User-Agent": random.choice(USER_AGENTS),
        "Accept-Language": "ru-RU,ru;q=0.8"
    }
    try:
        r = requests.get(CHECK_URL, headers=headers, timeout=12)
        r.raise_for_status()
        html = r.text
        signals = find_signals(html)
        important = []
        for s in signals:
            if s["status"] == "–ê–∫—Ç–∏–≤–µ–Ω" and (s["urgent"] or s["has_15"]
                                             or s["has_190"]):
                important.append(s)
        return important
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ fetch/parsing: {e}")
        return []


# ---------------- Main ----------------
def main():
    print("üü¢ Binance Alpha monitor v1.4 ‚Äî –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–∫–∞–∂–¥—ã–µ ~5s)")
    detected = load_detected()
    print(f"üì¶ –ó–∞–≥—Ä—É–∑–∏–ª–∏ {len(detected)} —Ä–∞–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö airdrop'–æ–≤")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    startup_msg = (
        "ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>\n"
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Binance Alpha –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {len(TELEGRAM_CHAT_IDS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    send_telegram_message(startup_msg)
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    while True:
        try:
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É... {now}")
            found = check_page()
            if not found:
                print(
                    f"‚úÖ –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç ({datetime.now().strftime('%H:%M:%S')})"
                )
            else:
                for a in found:
                    if a["id"] in detected:
                        print(
                            f"‚Äî —É–∂–µ –æ–ø–æ–≤–µ—â–∞–ª–∏: {a['project']} ({a['required_points']})"
                        )
                        continue

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–≤–æ—ë–º —Å—Ç–∏–ª–µ
                    spend_text = "15 –±–∞–ª–ª–æ–≤" if a["has_15"] else (
                        "190 –±–∞–ª–ª–æ–≤" if a["has_190"] else "‚Äî")
                    msg = (
                        "üö® <b>–í–´–®–ï–õ –ù–û–í–´–ô AIRDROP!</b> üö®\n\n"
                        f"üí∞ <b>–ú–æ–Ω–µ—Ç–∞:</b> {a['project']}\n"
                        f"üéØ <b>–£—Å–ª–æ–≤–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è:</b> {a['required_points']} –±–∞–ª–ª–æ–≤\n"
                        f"üí∏ <b>–¢—Ä–∞—Ç–∞ –±–∞–ª–ª–æ–≤:</b> {spend_text}\n"
                        f"‚è∞ <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω:</b> {datetime.now().strftime('%H:%M:%S')}\n\n"
                        "‚ö° –°–∫–æ—Ä–µ–µ –±–µ–≥–∏ –∑–∞–±–∏—Ä–∞—Ç—å!\n"
                        f"üîó {CHECK_URL}\n\n"
                        "#Airdrop #BinanceAlpha")

                    send_telegram_message(msg, url_button=CHECK_URL)
                    detected.add(a["id"])
                    save_detected(detected)
                    time.sleep(0.6)

            time.sleep(max(1, CHECK_INTERVAL + random.uniform(-1, 1)))
        except KeyboardInterrupt:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            time.sleep(5)


# --- Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot ---
app = Flask(__name__)

@app.route("/")
def home():
    return "Binance Alpha Monitor is alive ‚úÖ"

def run_server():
    port = int(os.environ.get("PORT", 3000))
    app.run(host="0.0.0.0", port=port)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server_thread = Thread(target=run_server)
    server_thread.daemon = True
    server_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    main()
